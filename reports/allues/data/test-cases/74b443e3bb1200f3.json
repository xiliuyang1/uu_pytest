{"uid":"74b443e3bb1200f3","name":"领取每日一箱奖励","fullName":"testcases.test_boxs.TestBoxs#test_receive_luckybox_reward","historyId":"a6332a1d69f9cadd08230fe5c0f67fe4","time":{"start":1688542312414,"stop":1688542312478,"duration":64},"status":"failed","statusMessage":"pytest_assume.plugin.FailedAssumption: \nOriginal Failure:\n\n>> TypeError('can only concatenate str (not \"dict\") to str')\n\n1 Failed Assumptions:\n\nutils\\requests_util.py:53: AssumptionFailure\n>>\tpytest.assume(False)\nAssertionError: assert False","statusTrace":"self = <testcases.test_boxs.TestBoxs object at 0x000001BCE52A9420>\ncaseinfo = {'datas': {'record_id': ['1150617370928889856']}, 'headers': {'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'a46328f58a48cfb5b844798a2c6d59e5'}, 'method': 'post', 'name': '领取每日一箱奖励', ...}\n\n    @pytest.mark.parametrize(\"caseinfo\", read_yaml(\"/test_activity/receive_luckybox_reward.yml\"))\n    def test_receive_luckybox_reward(self, caseinfo):\n        allure.dynamic.title(caseinfo['name'])\n        name = caseinfo['name']\n        method = caseinfo['method']\n        url = caseinfo['url']\n        headers = read_variable_yaml(caseinfo['headers'])\n        datas = read_variable_yaml(caseinfo['datas'])\n        verify = caseinfo['verify']\n>       RequestsUtil().send_request(testcasename=name, method=method, url=url, headers=headers, data=datas,\n                                    verify=verify)\n\ntestcases\\test_boxs.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\requests_util.py:35: in send_request\n    RequestsUtil().set_verify_result(res, verify, testcasename=testcasename)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.requests_util.RequestsUtil object at 0x000001BCE5567820>\nres = <Response [200]>, verify = [{'not null': {'$..zh-CN': 0}}]\ntestcasename = '领取每日一箱奖励'\n\n    def set_verify_result(self, res=None, verify=None, testcasename=None):\n        if verify is None:\n            pass\n        if verify is not None:\n            for validateitem in verify:\n                for key in validateitem.keys():\n                    # 获取断言的预期结果：\n                    validatelist = validateitem[key]\n                    if isinstance(validatelist, dict):\n                        for verify_key, verify_value in validatelist.items():\n                            # 获取响应数据中各字段的实际响应值：（json提取器）\n                            result_value = jsonpath.jsonpath(res.json(), verify_key)\n                            if not result_value:\n                                pytest.assume(False)\n                                my_logging.error(\n>                                   \"【\" + testcasename + \"】接口断言失败，响应数据中未查询到断言对象。响应结果为：\" + res.json())\nE                               pytest_assume.plugin.FailedAssumption: \nE                               Original Failure:\nE                               \nE                               >> TypeError('can only concatenate str (not \"dict\") to str')\nE                               \nE                               1 Failed Assumptions:\nE                               \nE                               utils\\requests_util.py:53: AssumptionFailure\nE                               >>\tpytest.assume(False)\nE                               AssertionError: assert False\n\nutils\\requests_util.py:55: FailedAssumption","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"setup","time":{"start":1688542292934,"stop":1688542293482,"duration":548},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"pytest_assume.plugin.FailedAssumption: \nOriginal Failure:\n\n>> TypeError('can only concatenate str (not \"dict\") to str')\n\n1 Failed Assumptions:\n\nutils\\requests_util.py:53: AssumptionFailure\n>>\tpytest.assume(False)\nAssertionError: assert False","statusTrace":"self = <testcases.test_boxs.TestBoxs object at 0x000001BCE52A9420>\ncaseinfo = {'datas': {'record_id': ['1150617370928889856']}, 'headers': {'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': 'a46328f58a48cfb5b844798a2c6d59e5'}, 'method': 'post', 'name': '领取每日一箱奖励', ...}\n\n    @pytest.mark.parametrize(\"caseinfo\", read_yaml(\"/test_activity/receive_luckybox_reward.yml\"))\n    def test_receive_luckybox_reward(self, caseinfo):\n        allure.dynamic.title(caseinfo['name'])\n        name = caseinfo['name']\n        method = caseinfo['method']\n        url = caseinfo['url']\n        headers = read_variable_yaml(caseinfo['headers'])\n        datas = read_variable_yaml(caseinfo['datas'])\n        verify = caseinfo['verify']\n>       RequestsUtil().send_request(testcasename=name, method=method, url=url, headers=headers, data=datas,\n                                    verify=verify)\n\ntestcases\\test_boxs.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nutils\\requests_util.py:35: in send_request\n    RequestsUtil().set_verify_result(res, verify, testcasename=testcasename)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <utils.requests_util.RequestsUtil object at 0x000001BCE5567820>\nres = <Response [200]>, verify = [{'not null': {'$..zh-CN': 0}}]\ntestcasename = '领取每日一箱奖励'\n\n    def set_verify_result(self, res=None, verify=None, testcasename=None):\n        if verify is None:\n            pass\n        if verify is not None:\n            for validateitem in verify:\n                for key in validateitem.keys():\n                    # 获取断言的预期结果：\n                    validatelist = validateitem[key]\n                    if isinstance(validatelist, dict):\n                        for verify_key, verify_value in validatelist.items():\n                            # 获取响应数据中各字段的实际响应值：（json提取器）\n                            result_value = jsonpath.jsonpath(res.json(), verify_key)\n                            if not result_value:\n                                pytest.assume(False)\n                                my_logging.error(\n>                                   \"【\" + testcasename + \"】接口断言失败，响应数据中未查询到断言对象。响应结果为：\" + res.json())\nE                               pytest_assume.plugin.FailedAssumption: \nE                               Original Failure:\nE                               \nE                               >> TypeError('can only concatenate str (not \"dict\") to str')\nE                               \nE                               1 Failed Assumptions:\nE                               \nE                               utils\\requests_util.py:53: AssumptionFailure\nE                               >>\tpytest.assume(False)\nE                               AssertionError: assert False\n\nutils\\requests_util.py:55: FailedAssumption","steps":[],"attachments":[{"uid":"a9b64e82c91c860a","name":"log","source":"a9b64e82c91c860a.txt","type":"text/plain","size":602}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":0,"hasContent":true},"afterStages":[{"name":"setup::0","time":{"start":1688542326857,"stop":1688542326857,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"labels":[{"name":"feature","value":"饰品盲盒模块"},{"name":"parentSuite","value":"testcases"},{"name":"suite","value":"test_boxs"},{"name":"subSuite","value":"TestBoxs"},{"name":"host","value":"DESKTOP-CM07T3T"},{"name":"thread","value":"12080-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"testcases.test_boxs"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"caseinfo","value":"{'name': '领取每日一箱奖励', 'method': 'post', 'url': '/api/activity/lucky/receive', 'headers': {'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': '{{token()}}'}, 'datas': {'record_id': \"{{read_extract_yaml()['record_id']}}\"}, 'verify': [{'not null': {'$..zh-CN': 0}}]}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"74b443e3bb1200f3.json","parameterValues":["{'name': '领取每日一箱奖励', 'method': 'post', 'url': '/api/activity/lucky/receive', 'headers': {'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8', 'token': '{{token()}}'}, 'datas': {'record_id': \"{{read_extract_yaml()['record_id']}}\"}, 'verify': [{'not null': {'$..zh-CN': 0}}]}"]}